/* @Selectors */

E[foo]                /*an E element with a "foo" attribute Attribute selectors 2 */
E[foo="bar"]          /*an E element whose "foo" attribute value is exactly equal to "bar"  Attribute selectors 2 */
E[foo~="bar"]         /*an E element whose "foo" attribute value is a list of whitespace-separated values, one of which is exactly equal to "bar" Attribute selectors 2 */
E[foo^="bar"]         /*an E element whose "foo" attribute value begins exactly with the string "bar" Attribute selectors 3 */
E[foo$="bar"]         /*an E element whose "foo" attribute value ends exactly with the string "bar" Attribute selectors 3 */
E[foo*="bar"]         /*an E element whose "foo" attribute value contains the substring "bar" Attribute selectors 3 */
E[foo|="en"]          /*an E element whose "foo" attribute has a hyphen-separated list of values beginning (from the left) with "en"  Attribute selectors 2 */
E:root                /*an E element, root of the document  Structural pseudo-classes 3 */
E:nth-child(n)        /*an E element, the n-th child of its parent  Structural pseudo-classes 3 */
E:nth-last-child(n)   /*an E element, the n-th child of its parent, counting from the last one  Structural pseudo-classes 3 */
E:nth-of-type(n)      /*an E element, the n-th sibling of its type  Structural pseudo-classes 3 */
E:nth-last-of-type(n) /*an E element, the n-th sibling of its type, counting from the last one  Structural pseudo-classes 3 */
E:first-child         /*an E element, first child of its parent Structural pseudo-classes 2 */
E:last-child          /*an E element, last child of its parent  Structural pseudo-classes 3 */
E:first-of-type       /*an E element, first sibling of its type Structural pseudo-classes 3 */
E:last-of-type        /*an E element, last sibling of its type  Structural pseudo-classes 3 */
E:only-child          /*an E element, only child of its parent  Structural pseudo-classes 3 */
E:only-of-type        /*an E element, only sibling of its type  Structural pseudo-classes 3 */
E:empty               /*an E element that has no children (including text nodes)  Structural pseudo-classes 3 */
E:link, E:visited     /*an E element being the source anchor of a hyperlink of which the target is not yet visited (:link) or already visited (:visited) */
E:active,E:hover, E:focus /*an E element during certain user actions  The user action pseudo-classes  1 and 2*/
E:target              /*an E element being the target of the referring URI  The target pseudo-class 3*/
E:lang(fr)            /*an element of type E in language "fr" (the document language specifies how language is determined)  The :lang() pseudo-class  2*/
E:enabled,E:disabled  /*a user interface element E which is enabled or disabled The UI element states pseudo-classes  3*/
E:checked             /*a user interface element E which is checked (for instance a radio-button or checkbox) The UI element states pseudo-classes  3*/
E::first-line         /*the first formatted line of an E element  The ::first-line pseudo-element 1*/
E::first-letter       /*the first formatted letter of an E element  The ::first-letter pseudo-element 1*/
E::before             /*generated content before an E element The ::before pseudo-element 2*/
E::after              /*generated content after an E element  The ::after pseudo-element  2*/
E:not(s)              /*an E element that does not match simple selector s  Negation pseudo-class 3*/
E F                   /*an F element descendant of an E element Descendant combinator 1*/
E > F                 /*an F element child of an E element  Child combinator  2*/
E + F                 /*an F element immediately preceded by an E element Adjacent sibling combinator 2*/
E ~ F                 /*an F element preceded by an E element*/

/* @Color */
/* Use `hsl()` property to make an adjustable color scheme based on hue, saturation (amount of gray), and luminosity (amount of white/black)
    red     hsl(0, 100%, 50%)
    yellow  hsl(60, 100%, 50%)
    green   hsl(120, 100%, 50%)
    cyan    hsl(180, 100%, 50%)
    blue    hsl(240, 100%, 50%)
    magenta hsl(300, 100%, 50%) */

/* @Flexbox */
flex-container {
  display: flex;
  flex-direction: row | row-reverse | column | column-reverse | initial | inherit;
  justify-content: flex-start | flex-end | center | space-between | space-around | initial | inherit; /*main axis*/
  align-items: stretch | center | flex-start | flex-end | baseline | initial | inherit; /*cross axis*/
  flex-wrap: nowrap | wrap | wrap-reverse | initial | inherit;
}
flex-item {
  flex: [grow] [shrink] [basis];
  flex: 0 0 100%; /* expand items to full width */
  
  /* Set the size based on the _main size_, the size of the flex container's main axis. */
  /* n = integer that represents a factor; default = 0 */
  flex-shrink: n;
  flex-grow: n;
  flex-basis: nem | npx | n% ...; /* Proportional value to set before flex properties are applied */

  /* Set the order of the element within the container; */
  order: n;
  align-self: stretch | center | flex-start | flex-end | baseline | initial | inherit;
}

/* @Transform */
div:hover {
    transform: scale(1.5); /* Embiggen by 50% */
    transform: skewX(-32deg); /* Skew horizontally */
}
/* @see Cumulative Layout Shifts, avoiding https://web.dev/cls/
- Instead of changing the height and width properties, use transform: scale().
- To move elements around, avoid changing the top, right, bottom, or left properties and use transform: translate() instead.
*/

/* @filter */
/* <filter-function> values */
filter: blur(5px);
filter: brightness(0.4);
filter: contrast(200%);
filter: drop-shadow(16px 16px 20px blue);
filter: grayscale(50%);
filter: hue-rotate(90deg);
filter: invert(75%);
filter: opacity(25%);
filter: saturate(30%);
filter: sepia(60%);

/* Multiple filters */
filter: contrast(175%) brightness(3%);

/* Use no filter */
filter: none;

/* Global values */
filter: inherit;
filter: initial;
filter: unset;

/* URL to SVG filter */
filter: url("filters.svg#filter-id");
