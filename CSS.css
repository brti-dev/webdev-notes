/* CSS */

/* Selectors */

E[foo]                /*an E element with a "foo" attribute Attribute selectors 2 */
E[foo="bar"]          /*an E element whose "foo" attribute value is exactly equal to "bar"  Attribute selectors 2 */
E[foo~="bar"]         /*an E element whose "foo" attribute value is a list of whitespace-separated values, one of which is exactly equal to "bar" Attribute selectors 2 */
E[foo^="bar"]         /*an E element whose "foo" attribute value begins exactly with the string "bar" Attribute selectors 3 */
E[foo$="bar"]         /*an E element whose "foo" attribute value ends exactly with the string "bar" Attribute selectors 3 */
E[foo*="bar"]         /*an E element whose "foo" attribute value contains the substring "bar" Attribute selectors 3 */
E[foo|="en"]          /*an E element whose "foo" attribute has a hyphen-separated list of values beginning (from the left) with "en"  Attribute selectors 2 */
E:root                /*an E element, root of the document  Structural pseudo-classes 3 */
E:nth-child(n)        /*an E element, the n-th child of its parent  Structural pseudo-classes 3 */
E:nth-last-child(n)   /*an E element, the n-th child of its parent, counting from the last one  Structural pseudo-classes 3 */
E:nth-of-type(n)      /*an E element, the n-th sibling of its type  Structural pseudo-classes 3 */
E:nth-last-of-type(n) /*an E element, the n-th sibling of its type, counting from the last one  Structural pseudo-classes 3 */
E:first-child         /*an E element, first child of its parent Structural pseudo-classes 2 */
E:last-child          /*an E element, last child of its parent  Structural pseudo-classes 3 */
E:first-of-type       /*an E element, first sibling of its type Structural pseudo-classes 3 */
E:last-of-type        /*an E element, last sibling of its type  Structural pseudo-classes 3 */
E:only-child          /*an E element, only child of its parent  Structural pseudo-classes 3 */
E:only-of-type        /*an E element, only sibling of its type  Structural pseudo-classes 3 */
E:empty               /*an E element that has no children (including text nodes)  Structural pseudo-classes 3 */
E:link, E:visited     /*an E element being the source anchor of a hyperlink of which the target is not yet visited (:link) or already visited (:visited) */
E:active,E:hover, E:focus /*an E element during certain user actions  The user action pseudo-classes  1 and 2*/
E:target              /*an E element being the target of the referring URI  The target pseudo-class 3*/
E:lang(fr)            /*an element of type E in language "fr" (the document language specifies how language is determined)  The :lang() pseudo-class  2*/
E:enabled,E:disabled  /*a user interface element E which is enabled or disabled The UI element states pseudo-classes  3*/
E:checked             /*a user interface element E which is checked (for instance a radio-button or checkbox) The UI element states pseudo-classes  3*/
E::first-line         /*the first formatted line of an E element  The ::first-line pseudo-element 1*/
E::first-letter       /*the first formatted letter of an E element  The ::first-letter pseudo-element 1*/
E::before             /*generated content before an E element The ::before pseudo-element 2*/
E::after              /*generated content after an E element  The ::after pseudo-element  2*/
E:not(s)              /*an E element that does not match simple selector s  Negation pseudo-class 3*/
E F                   /*an F element descendant of an E element Descendant combinator 1*/
E > F                 /*an F element child of an E element  Child combinator  2*/
E + F                 /*an F element immediately preceded by an E element Adjacent sibling combinator 2*/
E ~ F                 /*an F element preceded by an E element*/

/* Properties */

/* Color */
/* Use `hsl()` property to make an adjustable color scheme based on hue, saturation (amount of gray), and luminosity (amount of white/black)
    red     hsl(0, 100%, 50%)
    yellow  hsl(60, 100%, 50%)
    green   hsl(120, 100%, 50%)
    cyan    hsl(180, 100%, 50%)
    blue    hsl(240, 100%, 50%)
    magenta hsl(300, 100%, 50%) */

/* Flexbox */
flex-container {
    display: flex;
    flex-direction: row | row-reverse | column | column-reverse | initial | inherit;
    justify-content: flex-start | flex-end | center | space-between | space-around | initial | inherit; /*main axis*/
    align-items: stretch | center | flex-start | flex-end | baseline | initial | inherit; /*cross axis*/
    flex-wrap: nowrap | wrap | wrap-reverse | initial | inherit;
}
flex-item {
    flex: [grow] [shrink] [basis]
    flex-shrink: n;
    flex-grow: n;
    flex-basis: nem | npx ...; /*Proportional value to set before flex properties are applied*/
    order: n;
    align-self: stretch | center | flex-start | flex-end | baseline | initial | inherit;
}

/* Transform */
div:hover {
    transform: scale(1.5); // Embiggen by 50%
    transform: skewX(-32deg); // Skew horizontally
}

/********/
/* SCSS */
/********/

/* Interpolation */

@mixin define-emoji($name, $glyph) {
  span.emoji-#{$name} {
    font-family: IconFont;
    font-variant: normal;
    font-weight: normal;
    content: $glyph;
  }
}
@include define-emoji("women-holding-hands", "ðŸ‘­");

/* Property Declarations */

.circle {
  $size: 100px;
  width: $size;
  height: $size;
  border-radius: $size / 2;
}

$rounded-corners: false;
.button {
  border: 1px solid black;
  border-radius: if($rounded-corners, 5px, null);
}

/* Nesting */

.enlarge {
  font-size: 14px;
  transition: {
    property: font-size;
    duration: 4s;
    delay: 2s;
  }
  &:hover { font-size: 36px; }
}

.info-page {
  margin: auto {
    bottom: 10px;
    top: 2px;
  }
}

/* Parent Selector */
.alert {
  // The parent selector can be used to add pseudo-classes to the outer
  // selector.
  &:hover {
    font-weight: bold;
  }

  // It can also be used to style the outer selector in a certain context, such
  // as a body set to use a right-to-left language.
  [dir=rtl] & {
    margin-left: 0;
    margin-right: 10px;
  }

  // You can even use it as an argument to pseudo-class selectors.
  :not(&) {
    opacity: 0.8;
  }

  // Add suffixes

  &__copy { // .alert__copy
    display: none;
    padding: 1rem 1.5rem 2rem 1.5rem;
    color: gray;
    line-height: 1.6;
    font-size: 14px;
    font-weight: 500;

    &--open { // .alert__copy--open
      display: block;
    }
  }
}

/* Placeholder Selector */

// % is a special Sass selector
%toolbelt {
  box-sizing: border-box;
  border-top: 1px rgba(#000, .12) solid;
  padding: 16px 0;
  width: 100%;
  &:hover { border: 2px rgba(#000, .5) solid; }
}

.action-buttons {
  @extend %toolbelt;
  color: #4285f4;
}

.reset-buttons {
  @extend %toolbelt;
  color: #cddc39;
}

// Compiled result:
.action-buttons, .reset-buttons {
  box-sizing: border-box;
  border-top: 1px rgba(0, 0, 0, 0.12) solid;
  padding: 16px 0;
  width: 100%;
}
.action-buttons:hover, .reset-buttons:hover {
  border: 2px rgba(0, 0, 0, 0.5) solid;
}
.action-buttons {
  color: #4285f4;
}
.reset-buttons {
  color: #cddc39;
}
````